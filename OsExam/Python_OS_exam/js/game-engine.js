class GameEngine {
    constructor() {
        this.questionGenerator = new QuestionGenerator();
        this.currentTaskIndex = 0;
        this.score = 0;
        this.tasks = [];
        this.userAnswers = [];
        this.isGameActive = false;
    }

    startNewGame() {
        this.currentTaskIndex = 0;
        this.score = 0;
        this.userAnswers = [];
        this.tasks = this.questionGenerator.generateTaskSet();
        this.isGameActive = true;
        
        console.log('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞. –ó–∞–¥–∞–Ω–∏—è:', this.tasks);
        return this.tasks[0];
    }

    restartGame() {
        this.questionGenerator.updateSeed();
        return this.startNewGame();
    }

    getCurrentTask() {
        return this.tasks[this.currentTaskIndex];
    }

    submitAnswer(userAnswer) {
        const currentTask = this.getCurrentTask();
        let isCorrect = false;
        let feedback = '';

        switch (currentTask.type) {
            case 'code':
            case 'multiple_choice':
            case 'synchronization':
            case 'memory':
            case 'scenario':
                isCorrect = parseInt(userAnswer) === currentTask.correctAnswer;
                feedback = isCorrect ?
                    `–í–µ—Ä–Ω–æ! ${currentTask.options[currentTask.correctAnswer]} - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.` :
                    `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentTask.options[currentTask.correctAnswer]}`;
                break;

            case 'diagram':
                isCorrect = parseInt(userAnswer) === currentTask.correctAnswer;
                feedback = isCorrect ?
                    `–í–µ—Ä–Ω–æ! ${currentTask.diagrams[currentTask.correctAnswer].label} - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.` :
                    `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentTask.diagrams[currentTask.correctAnswer].label}`;
                break;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userAnswers.push({
            task: currentTask,
            userAnswer: userAnswer,
            isCorrect: isCorrect,
            feedback: feedback
        });

        return {
            isCorrect: isCorrect,
            feedback: feedback,
            correctAnswer: currentTask.correctAnswer,
            taskType: currentTask.type
        };
    }

    addScore() {
        this.score++;
    }

    nextTask() {
        this.currentTaskIndex++;
        if (this.currentTaskIndex < this.tasks.length) {
            return this.tasks[this.currentTaskIndex];
        }
        return null;
    }

    isGameComplete() {
        return this.currentTaskIndex >= this.tasks.length;
    }

    getFinalResults() {
        const ranks = [
            { score: 5, title: "Python Concurrency Guru", description: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –º–∞—Å—Ç–µ—Ä –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ Python!", icon: "üêç‚ö°" },
            { score: 4, title: "Senior Python Developer", description: "–û—Ç–ª–∏—á–Ω–æ! –í—ã —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –ø–æ—Ç–æ–∫–∞–º–∏.", icon: "üíªüîß" },
            { score: 3, title: "Python Developer", description: "–•–æ—Ä–æ—à–æ! –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è.", icon: "üìöüêç" },
            { score: 2, title: "Junior Pythonista", description: "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –Ω—É–∂–Ω–æ —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –æ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏.", icon: "üë®‚Äçüíªüåü" },
            { score: 0, title: "Python Beginner", description: "–í–∞–º —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ Python.", icon: "üéìüìñ" }
        ];

        const rank = ranks.find(r => this.score >= r.score) || ranks[ranks.length - 1];

        return {
            score: this.score,
            total: this.tasks.length,
            rank: rank,
            answers: this.userAnswers
        };
    }

    getHint() {
        const currentTask = this.getCurrentTask();
        return currentTask.hint || "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.";
    }
}