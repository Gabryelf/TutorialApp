class GameEngine {
    constructor() {
        this.questionGenerator = new QuestionGenerator();
        this.currentTaskIndex = 0;
        this.score = 0;
        this.tasks = [];
        this.userAnswers = [];
        this.isGameActive = false;
    }

    startNewGame() {
        this.currentTaskIndex = 0;
        this.score = 0;
        this.userAnswers = [];
        this.tasks = this.questionGenerator.generateTaskSet();
        this.isGameActive = true;
        
        console.log('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞. –ó–∞–¥–∞–Ω–∏—è:', this.tasks);
        return this.tasks[0];
    }

    restartGame() {
        this.questionGenerator.updateSeed();
        return this.startNewGame();
    }

    getCurrentTask() {
        return this.tasks[this.currentTaskIndex];
    }

    submitAnswer(userAnswer) {
        const currentTask = this.getCurrentTask();
        let isCorrect = false;
        let feedback = '';

        switch (currentTask.type) {
            case 'command':
                isCorrect = this.checkCommandAnswer(userAnswer, currentTask.correctAnswer);
                feedback = isCorrect ? 
                    `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ö–æ–º–∞–Ω–¥–∞ "${currentTask.correctAnswer}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.` :
                    `–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${currentTask.correctAnswer}`;
                break;

            case 'multiple_choice':
                isCorrect = parseInt(userAnswer) === currentTask.correctAnswer;
                feedback = isCorrect ?
                    `–í–µ—Ä–Ω–æ! ${currentTask.options[currentTask.correctAnswer]} - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.` :
                    `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentTask.options[currentTask.correctAnswer]}`;
                break;

            case 'file_system':
                isCorrect = parseInt(userAnswer) === currentTask.correctAnswer;
                feedback = isCorrect ?
                    '–û—Ç–ª–∏—á–Ω–æ! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.' :
                    `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:\n${currentTask.commands.join('\n')}`;
                break;

            case 'process':
                isCorrect = this.checkArrayAnswer(userAnswer, currentTask.correctAnswer);
                feedback = isCorrect ?
                    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.' :
                    `–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n${currentTask.correctOrder.map(i => currentTask.steps[i]).join('\n')}`;
                break;

            case 'permission':
                isCorrect = userAnswer.trim() === currentTask.correctAnswer;
                feedback = isCorrect ?
                    `–í–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∞ ${currentTask.targetRights} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.` :
                    `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${currentTask.correctAnswer}`;
                break;
        }

        if (isCorrect) {
            this.score++;
        }

        this.userAnswers.push({
            task: currentTask,
            userAnswer: userAnswer,
            isCorrect: isCorrect,
            feedback: feedback
        });

        return {
            isCorrect: isCorrect,
            feedback: feedback,
            score: this.score,
            correctAnswer: currentTask.correctAnswer
        };
    }

    checkCommandAnswer(userAnswer, correctAnswer) {
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const normalizedUser = userAnswer.trim().toLowerCase().replace(/\s+/g, ' ');
        const normalizedCorrect = correctAnswer.toLowerCase().replace(/\s+/g, ' ');
        
        return normalizedUser === normalizedCorrect;
    }

    checkArrayAnswer(userAnswer, correctArray) {
        try {
            const userArray = JSON.parse(userAnswer);
            if (!Array.isArray(userArray)) return false;
            
            return userArray.length === correctArray.length && 
                   userArray.every((val, idx) => val === correctArray[idx]);
        } catch {
            return false;
        }
    }

    nextTask() {
        this.currentTaskIndex++;
        if (this.currentTaskIndex < this.tasks.length) {
            return this.tasks[this.currentTaskIndex];
        }
        return null;
    }

    isGameComplete() {
        return this.currentTaskIndex >= this.tasks.length;
    }

    getFinalResults() {
        const ranks = [
            { score: 5, title: "Linux –ì—É—Ä—É", description: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä Linux!", icon: "üêß‚≠ê" },
            { score: 4, title: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", description: "–û—Ç–ª–∏—á–Ω–æ! –í—ã —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ Linux.", icon: "üíªüîß" },
            { score: 3, title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", description: "–•–æ—Ä–æ—à–æ! –ï—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è, –Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è.", icon: "üìö‚úì" },
            { score: 2, title: "–ù–∞—á–∏–Ω–∞—é—â–∏–π", description: "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ Linux.", icon: "üë∂üîç" },
            { score: 0, title: "–ù–æ–≤–∏—á–æ–∫", description: "–í–∞–º —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã Linux –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.", icon: "üéØüìñ" }
        ];

        const rank = ranks.find(r => this.score >= r.score) || ranks[ranks.length - 1];

        return {
            score: this.score,
            total: this.tasks.length,
            rank: rank,
            answers: this.userAnswers
        };
    }

    getHint() {
        const currentTask = this.getCurrentTask();
        return currentTask.hint || "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.";
    }
}